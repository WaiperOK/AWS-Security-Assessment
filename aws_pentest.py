import logging
import time
from politic.security_groups import check_security_groups
from politic.s3_config import check_s3_buckets
from politic.iam_policies import check_iam_policies
from politic.cloudtrail_config import check_cloudtrail
from politic.cloudwatch_config import check_cloudwatch
from politic.vpc_config import check_vpc_subnets
from politic.rds_config import check_rds
from politic.lambda_config import check_lambda_functions
from politic.apigateway_config import check_api_gateway
from politic.ebs_config import check_ebs_volumes
from politic.elb_config import check_elb
from politic.dynamodb_config import check_dynamodb
from politic.sqs_config import check_sqs
from politic.cloudfront_config import check_cloudfront_distributions
from politic.config_rules import check_config_rules
from politic.iam_roles import check_iam_roles
from politic.mfa_check import check_mfa
from politic.security_hub import check_security_hub
from politic.backups_check import check_backups
from politic.tags_check import check_tags
from politic.vpc_endpoints_check import check_vpc_endpoints
from politic.organizations_check import check_organizations
from politic.network_acl_check import check_network_acls
from politic.ec2_instances_check import check_ec2_instances
from politic.logging_monitoring_check import check_logging_monitoring
from politic.containers_check import check_containers
from politic.report_generator import generate_pdf_report
from politic.ai_module import analyze_logs_for_anomalies
from utils import log_and_store, get_aws_session


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

log_messages = []

def main():
    start_time = time.time()  # Начало измерения времени выполнения

    sessions = get_aws_session()  # Получение сессии AWS
    log_and_store(log_messages, "[INFO] Starting AWS pentest...\n" + "-" * 40)

    log_and_store(log_messages, "[INFO] Checking Security Groups...\n" + "-" * 40)
    check_security_groups(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking S3 Buckets...\n" + "-" * 40)
    check_s3_buckets(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking IAM Policies...\n" + "-" * 40)
    check_iam_policies(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking CloudTrail Configuration...\n" + "-" * 40)
    check_cloudtrail(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking CloudWatch Configuration...\n" + "-" * 40)
    check_cloudwatch(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking VPC and Subnet Configuration...\n" + "-" * 40)
    check_vpc_subnets(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking RDS Configuration...\n" + "-" * 40)
    check_rds(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Lambda Functions...\n" + "-" * 40)
    check_lambda_functions(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking API Gateway Configuration...\n" + "-" * 40)
    check_api_gateway(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking EBS Volumes...\n" + "-" * 40)
    check_ebs_volumes(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking ELB Configuration...\n" + "-" * 40)
    check_elb(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking DynamoDB Configuration...\n" + "-" * 40)
    check_dynamodb(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking SQS Configuration...\n" + "-" * 40)
    check_sqs(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking CloudFront Configuration...\n" + "-" * 40)
    check_cloudfront_distributions(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking AWS Config Rules...\n" + "-" * 40)
    check_config_rules(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking IAM Roles...\n" + "-" * 40)
    check_iam_roles(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking MFA Configuration...\n" + "-" * 40)
    check_mfa(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Security Hub Findings...\n" + "-" * 40)
    check_security_hub(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Backups...\n" + "-" * 40)
    check_backups(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Resource Tags...\n" + "-" * 40)
    check_tags(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking VPC Endpoints...\n" + "-" * 40)
    check_vpc_endpoints(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking AWS Organizations...\n" + "-" * 40)
    check_organizations(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Network ACLs...\n" + "-" * 40)
    check_network_acls(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking EC2 Instances...\n" + "-" * 40)
    check_ec2_instances(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking Logging and Monitoring...\n" + "-" * 40)
    check_logging_monitoring(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Checking ECS/EKS Containers...\n" + "-" * 40)
    check_containers(log_messages, sessions)

    log_and_store(log_messages, "[INFO] Pentest completed.\n" + "=" * 40)

    end_time = time.time()
    elapsed_time = end_time - start_time
    log_and_store(log_messages, f"[INFO] Total execution time: {elapsed_time:.2f} seconds\n" + "=" * 40)

    generate_pdf_report("aws_pentest_report.pdf", log_messages)
    analyze_logs_for_anomalies(log_messages)

if __name__ == "__main__":
    main()
